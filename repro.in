#!/bin/bash
set -eE -o pipefail

if ((DEBUG)); then
  set -x
fi

BUILDDIRECTORY=/var/lib/repro

KEYRINGCACHE="${BUILDDIRECTORY}/keyring"

BOOTSTRAPMIRROR=https://mirror.archlinux.no/iso/latest
readonly bootstrap_img=archlinux-bootstrap-"$(date +%Y.%m)".01-"$(uname -m)".tar.gz
CONFIGDIR='REPRO_CONFIG_DIR'

# HOSTMIRROR=$(curl -s 'https://www.archlinux.org/mirrorlist/?protocol=https' | awk '/^#Server/ {print $3; exit}')
## Hardcoded until further notice
HOSTMIRROR="http://mirror.neuf.no/archlinux/\$repo/os/\$arch"

IMGDIRECTORY=$(mktemp -dt XXXXXXXXXX.arch_img)
trap "{ rm -r $IMGDIRECTORY; }" EXIT

DIFFOSCOPE="diffoscope"

# Turn on/off check in repro
: "${NOCHECK:=0}"

CACHEDIR="${CACHEDIR:-cache}"

# Desc: Escalates privileges
orig_argv=("$0" "$@")
src_owner=${SUDO_USER:-$USER}
function check_root() {
    local keepenv=$1
    (( EUID == 0 )) && return
    if type -P sudo >/dev/null; then
        exec sudo --preserve-env=$keepenv -- "${orig_argv[@]}"
    else
        exec su root -c "$(printf ' %q' "${orig_argv[@]}")"
    fi
}

# Use a private gpg keyring
function gpg() {
  command gpg --homedir="$BUILDDIRECTORY/_gnupg" "$@"
}

function init_gnupg() {
    [ ! -d "$BUILDDIRECTORY/_gnupg" ] && mkdir -p "$BUILDDIRECTORY/_gnupg"

    # ensure signing key is available
    # We try WKD first, then fallback to keyservers.
    # This works on debian./
    gpg --keyserver=p80.pool.sks-keyservers.net --auto-key-locate wkd,keyserver --locate-keys pierre@archlinux.de &>/dev/null
}

# Desc: Sets the appropriate colors for output
function colorize() {
    # prefer terminal safe colored and bold text when tput is supported
    if tput setaf 0 &>/dev/null; then
        ALL_OFF="$(tput sgr0)"
        BOLD="$(tput bold)"
        BLUE="${BOLD}$(tput setaf 4)"
        GREEN="${BOLD}$(tput setaf 2)"
        RED="${BOLD}$(tput setaf 1)"
        YELLOW="${BOLD}$(tput setaf 3)"
    else
        ALL_OFF="\e[0m"
        BOLD="\e[1m"
        BLUE="${BOLD}\e[34m"
        GREEN="${BOLD}\e[32m"
        RED="${BOLD}\e[31m"
        YELLOW="${BOLD}\e[33m"
    fi
    readonly ALL_OFF BOLD BLUE GREEN RED YELLOW
}
colorize

# Desc: Message format
function msg() {
    local mesg=$1; shift
    # shellcheck disable=SC2059
    printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

# Desc: Sub-message format
function msg2() {
    local mesg=$1; shift
    # shellcheck disable=SC2059
    printf "${BLUE}  ->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

# Desc: Warning format
function warning() {
    local mesg=$1; shift
    # shellcheck disable=SC2059
    printf "${YELLOW}==> $(gettext "WARNING:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

# Desc: Error format
function error() {
    local mesg=$1; shift
    # shellcheck disable=SC2059
    printf "${RED}==> $(gettext "ERROR:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

##
#  usage : lock( $fd, $file, $message, [ $message_arguments... ] )
##
lock() {
    # Only reopen the FD if it wasn't handed to us
    if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
        mkdir -p -- "$(dirname -- "$2")"
        eval "exec $1>"'"$2"'
    fi

    flock -n "$1"
}

##
#  usage : slock( $fd, $file, $message, [ $message_arguments... ] )
##
nlock() {
    # Only reopen the FD if it wasn't handed to us
    if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
        mkdir -p -- "$(dirname -- "$2")"
        eval "exec $1>"'"$2"'
    fi

    flock "$1"
}

##
#  usage : lock_close( $fd )
##
lock_close() {
    local fd=$1
    # https://github.com/koalaman/shellcheck/issues/862
    # shellcheck disable=2034
    exec {fd}>&-
}

# Desc: Executes an command inside a given nspawn container
# 1: Container name
# 2: Command to execute
function exec_nspawn(){
    local container=$1
    systemd-nspawn -q \
      --as-pid2 \
      --register=no \
      ${EPHEMERAL:+--ephemeral} \
      --pipe \
      -E "PATH=/usr/local/sbin:/usr/local/bin:/usr/bin" \
      -D "$BUILDDIRECTORY/$container" "${@:2}"
}

# Desc: Removes the root container
function cleanup_root_volume(){
    warning "Removing root container..."
    rm -rf "$BUILDDIRECTORY/root"
}

# Desc: Removes a given snapshot
# 1: Snapshot name
function remove_snapshot (){
    local build=$1
    msg2 "Delete snapshot for $build..."
    rm -rf "${BUILDDIRECTORY:?}/${build}"
    trap - ERR INT
}

# Desc: Creates a snapshot of the root container
# 1: name of container
function create_snapshot (){
    local build="$1"
    trap "{ remove_snapshot \"$build\" ; exit 1; }" ERR INT
    msg2 "Create snapshot for $build..."
    mkdir -p "${BUILDDIRECTORY}/${build}/startdir"
    touch "$BUILDDIRECTORY/$build"
}

# Desc: Build a package inside a container
# 1: Container name
# 2: Container buildpath
function build_package(){
    local build=$1
    local builddir=${2:-"/startdir"}
    local args=""
    if ((pkgbuild_file)); then
      args=--bind="${PWD}:/startdir"
    fi
    exec_nspawn "$build" \
bash <<-__END__
set -e
install -d -o builduser -g builduser /pkgdest
install -d -o builduser -g builduser /srcpkgdest
install -d -o builduser -g builduser /build
__END__
    exec_nspawn "$build" $args sudo -iu builduser bash -c ". /etc/profile; cd /startdir; SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH makepkg -sc --noconfirm --skippgpcheck $( (( NOCHECK )) && echo --nocheck)"
    mkdir -p "./build"
    for pkgfile in "$BUILDDIRECTORY/$build"/pkgdest/*; do
        mv "$pkgfile" "./build/"
    done
    chown -R "$src_owner" "./build"
}

# Desc: Sets up a container with the correct files
function init_chroot(){
    set -e

    [ ! -d "$BUILDDIRECTORY" ] && mkdir -p "$BUILDDIRECTORY"

    # Prepare root chroot
    if [ ! -d "$BUILDDIRECTORY"/root ]; then
        lock 9 "$BUILDDIRECTORY"/root.lock
        msg "Preparing chroot"
        trap '{ cleanup_root_volume; exit 1; }' ERR
        trap '{ cleanup_root_volume; trap - INT; kill -INT $$; }' INT

        msg2 "Extracting image into container..."
        mkdir -p "$BUILDDIRECTORY/root"
        tar xvf "$IMGDIRECTORY/$bootstrap_img" -C "$BUILDDIRECTORY/root" --strip-components=1 > /dev/null

        printf 'Server = %s\n' "$HOSTMIRROR" > "$BUILDDIRECTORY"/root/etc/pacman.d/mirrorlist
        sed -i "s/LocalFileSigLevel.*//g" "$BUILDDIRECTORY/root/etc/pacman.conf"

        systemd-machine-id-setup --root="$BUILDDIRECTORY"/root
        msg2 "Setting up keyring, this might take a while..."
        exec_nspawn root pacman-key --init &> /dev/null
        exec_nspawn root pacman-key --populate archlinux &> /dev/null
        exec_nspawn root pacman -Sy
        touch "$BUILDDIRECTORY/root/.repro-1"
        lock_close 9
    else
      if [ ! -f "$BUILDDIRECTORY/root/.repro-1" ]; then
        error "Please delete $BUILDDIRECTORY and initialize the chroots again"
        exit 1
      fi
      if lock 9 "$BUILDDIRECTORY"/root.lock; then
          printf 'Server = %s\n' "$HOSTMIRROR" > "$BUILDDIRECTORY"/root/etc/pacman.d/mirrorlist
          exec_nspawn root pacman -Syu --noconfirm
          lock_close 9
      else
          msg "Couldn't acquire lock on root chroot, didn't update."
      fi
    fi
    trap - ERR INT
}

# Desc: Reproduces a package
# 1: Location of package
function cmd_check(){
    local pkg="${1}"
    local cachedir="${CACHEDIR}"

    if [[ ! -f "${pkg}" ]]; then
      error "no package file given"
      exit 1
    fi

    trap - ERR INT


    declare -A buildinfo
    while IFS=$'=' read -r key value; do
        [[ "${key}" = [#!]* ]] || [[ "${key}" = "" ]] || buildinfo["${key}"]="${value}"
    done <<< "$(buildinfo -ff "${pkg}")"
    packager="${buildinfo[packager]}"
    builddir="${buildinfo[builddir]}"
    _pkgver="${buildinfo[pkgver]}"
    pkgrel=${_pkgver##*-}
    pkgver=${_pkgver%-*}
    pkgbase=${buildinfo[pkgbase]}
    options=${buildinfo[options]}
    buildenv=${buildinfo[buildenv]}
    format=${buildinfo[format]}
    installed=${buildinfo[installed]}


    pkgbuild_sha256sum="${buildinfo[pkgbuild_sha256sum]}"
    SOURCE_DATE_EPOCH="${buildinfo[builddate]}"

    if [[ ${format} -ne 1 ]]; then
      error "unsupported BUILDINFO format or no format definition found, aborting rebuild"
      exit 1
    fi

    msg2 "Preparing packages"
    mkdir -p "${cachedir}"
    mapfile -t packages < <(buildinfo -d "${cachedir}" "${pkg}")
    msg2 "Finished preparing packages"

    msg "Starting build..."
    local build="${pkgbase}_$$"
    create_snapshot "$build" 0

    local build_root_dir="$BUILDDIRECTORY/${build}"

    # Father I have sinned
    if ((!pkgbuild_file)); then
    EPHEMERAL=1 exec_nspawn root --bind="${build_root_dir}/startdir:/startdir" --bind="$(readlink -e ${cachedir}):/var/cache/pacman/pkg" \
    bash <<-__END__
shopt -s globstar
pacman -S asp devtools --noconfirm
cp /usr/share/devtools/makepkg-x86_64.conf /etc/makepkg.conf
asp checkout $pkgbase
pushd $pkgbase
for rev in \$(git rev-list --all -- repos/); do
    pkgbuild_checksum=\$(git show \$rev:trunk/PKGBUILD | sha256sum -b)
    pkgbuild_checksum=\${pkgbuild_checksum%% *}
    if [ \$pkgbuild_checksum = $pkgbuild_sha256sum ]; then
        git checkout \$rev
        mv ./trunk/* /startdir
        exit 0
    fi
done
exit 1
__END__
  elif [[ -r "PKGBUILD" ]]; then
    if [[ "$(sha256sum PKGBUILD | awk '{print $1}')" != "$pkgbuild_sha256sum" ]]; then
      error "PKGBUILD doesn't match the checksum"
      exit 1
    fi
  else
    error "No PKGBUILD file present!"
    exit 1
  fi

    # buildinfo returns packages with absolute paths to the location
    # this strips the paths and adds "cache/" prefix
    packages=(${packages[@]##*/})
    packages=(${packages[@]/#/cache\/})

    # shellcheck disable=SC2086
    keyring_package="$(printf -- '%s\n' ${installed[*]} | grep -E "archlinux-keyring")"

    if [ ! -d "$KEYRINGCACHE/$keyring_package" ]; then
      msg2 "Setting up $keyring_package in keyring cache, this might take a while..."

      nlock 9 "$KEYRINGCACHE/$keyring_package.lock"
      # shellcheck disable=SC2086
      keyring=$(printf -- '%s\n' ${packages[*]} | grep -E "archlinux-keyring")
      EPHEMERAL=1 exec_nspawn root --bind="${build_root_dir}:/mnt" --bind="$(readlink -e "${cachedir}"):/cache" bash -c \
          'pacstrap -U /mnt "$@"' -bash "${keyring}" &>/dev/null

      mkdir -p "$KEYRINGCACHE/$keyring_package"
      trap "{ rm -rf $KEYRINGCACHE/$keyring_package ; exit 1; }" ERR INT
      EPHEMERAL=1 exec_nspawn root \
        --bind="$KEYRINGCACHE/$keyring_package:/mnt" \
        --bind="${build_root_dir}/usr/share/pacman/keyrings:/usr/share/pacman/keyrings" \
        -E PACMAN_KEYRING_DIR=/mnt \
        bash -c 'pacman-key --init && pacman-key --populate archlinux' &>/dev/null
      lock_close 9 "$KEYRINGCACHE/$keyring_package.lock"
      trap - ERR INT
    else
      msg2 "Found $keyring_package in keyring cache"
    fi

    msg "Installing packages"
    # shellcheck disable=SC2086
    EPHEMERAL=1 exec_nspawn root \
      --bind="${build_root_dir}:/mnt" \
      --bind-ro="$KEYRINGCACHE/$keyring_package:/etc/pacman.d/gnupg" \
      --bind="$(readlink -e ${cachedir}):/cache" bash -c \
      'pacstrap -G -U /mnt --needed "$@"' -bash "${packages[@]}"

    # Setup environment
    {
        printf 'MAKEFLAGS="%s"\n' "${MAKEFLAGS:--j$(nproc)}"
        printf 'PKGDEST=/pkgdest\n'
        printf 'SRCPKGDEST=/srcpkgdest\n'
        printf 'BUILDDIR=%s\n' "${builddir}"
        printf 'PACKAGER=%s\n' "${packager@Q}"
        printf 'OPTIONS=(%s)\n' "${options}"
        printf 'BUILDENV=(%s)\n' "${buildenv}"
        printf 'COMPRESSZST=(zstd -c -T0 --ultra -20 -)\n'
        printf 'PKGEXT=".pkg.tar%s"\n' "${pkg##*tar}"
     } >> "$build_root_dir/etc/makepkg.conf"

    printf '%s.UTF-8 UTF-8\n' en_US de_DE > "$build_root_dir/etc/locale.gen"
    printf 'LANG=en_US.UTF-8\n' > "$build_root_dir/etc/locale.conf"
    exec_nspawn "$build" locale-gen

    printf 'builduser ALL = NOPASSWD: /usr/bin/pacman\n' > "$build_root_dir/etc/sudoers.d/builduser-pacman"
    exec_nspawn "$build" useradd -m -s /bin/bash -d /build builduser
    echo "keyserver-options auto-key-retrieve" | install -Dm644 /dev/stdin "$build_root_dir/build/.gnupg/gpg.conf"
    exec_nspawn "$build" chown -R builduser /build/.gnupg /startdir
    exec_nspawn "$build" chmod 700 /build/.gnupg

    build_package "$build" "$builddir"
    remove_snapshot "$build"
    chown -R "$src_owner" "${cachedir}"

    msg "Comparing hashes..."
    if diff -q -- "$pkg" ./build/"$(basename "$pkg")" > /dev/null ; then
      msg "Package is reproducible!"
      exit 0
    else
      error "Package is not reproducible"
      if ((run_diffoscope)); then
          PYTHONIOENCODING=utf-8 $DIFFOSCOPE "$pkg" ./build/"$(basename "$pkg")" || true
      fi
      exit 1
    fi
}

# Desc: Fetches a bootstrap image and verifies the signature
function get_bootstrap_img() {
    if [ ! -e "$IMGDIRECTORY/$bootstrap_img" ]; then
        msg "Downloading bootstrap image..."
        ( cd "$IMGDIRECTORY" && curl -f --remote-name-all "$BOOTSTRAPMIRROR/$bootstrap_img"{,.sig} )
        if ! gpg --verify "$IMGDIRECTORY/$bootstrap_img.sig" "$IMGDIRECTORY/$bootstrap_img"; then
            error "Can't verify image"
            exit 1
        fi
    fi
}

# Desc: Prints the help section
function print_help() {
cat <<__END__
Usage:
  repro [options]

General Options:
 -h                           Print this help message
 -d                           Run diffoscope if packages are not reproducible
 -f                           Use the local PKGBUILD for building
 -n                           Run makepkg with --nocheck
__END__
}

hash buildinfo 2>/dev/null || { error "Require buildinfo in path! Aborting..."; exit 1; }

# Default options
run_diffoscope=0

# By default we don't assume a PKGBUILD
pkgbuild_file=0

repro_conf=$CONFIGDIR/repro.conf
if [[ -r $repro_conf ]]; then
    # shellcheck source=/dev/null
    source "$repro_conf"
fi

xdg_repro_dir="${XDG_CONFIG_HOME:-$HOME/.config}/archlinux-repro"
if [[ -r "$xdg_repro_dir/repro.conf" ]]; then
    # shellcheck source=/dev/null
    source "$xdg_repro_dir/repro.conf"
elif [[ -r "$HOME/.repro.conf" ]]; then
    # shellcheck source=/dev/null
    source "$HOME/.repro.conf"
fi


while getopts :hdnf arg; do
    case $arg in
        h) print_help; exit 0;;
        f) pkgbuild_file=1;;
        d) run_diffoscope=1;;
        n) NOCHECK=1;;
        *) ;;
    esac
done

# Save command args (such as path to .pkg.tar.xz file)
shift $((OPTIND-1))

check_root NOCHECK,MAKEFLAGS,DEBUG,CACHEDIR
init_gnupg
test -d "$BUILDDIRECTORY"/root || get_bootstrap_img
test -d "$KEYRINGCACHE" || mkdir -p "$KEYRINGCACHE"
init_chroot
cmd_check "$@"
